[
  {
    "name":"Vue.js",
    "title":"Model | View",
    "comment":"Подключение библиотеки Vue.js:<br/> &lt;script src ='https://unpkg.com/vue'>&lt;/script>",
    "ref":"https://docs.google.com/presentation/d/1Ngckdav0zi7vPw9V8FC7aJGsXIsYDCy_Bi6aBXcZzjo/edit?usp=sharing",
    "picture":false
  },
  {
    "name":"Directives",
    "title":"Директивы Vue.js",
    "comment":"Директивы расширяют множество стандартных атрибутов тегов, позволяя использовать встроенные возможности Vue.js по управлению отображением данных модели в представлении.<br/>По сути, директива - это особый токен в разметке, который сообщает библиотеке Vue.js, что делать с элементом DOM.<br/>Все директивы Vue.js имеют префикс (v-)",
    "code": [
      "<tag v-[directiveId] = '...'></tag>",
      "// Следующая директива инструктирует",
      "// Vue.js обновлять текст в элементе ",
      "// div при изменении значения message ",
      "// в модели",
      "<div v-text='message'></div>",
      "// Далее используется вычисляемое ",
      "// выражение вместо одного ключевого ",
      "// свойства. ",
      "// Vue.js автоматически отслеживает ",
      "// свойства, от которых зависит ",
      "// выражение, и обновляет директиву, ",
      "// когда изменяется зависимость",
      "<div ",
      "    v-text='message + user.name'>",
      "</div>"
    ],
    "ref":"https://docs.google.com/presentation/d/1igrCFnps4TL7aebpWPPVeCveO7dYhO8NVQ9oVCRrcEw/edit?usp=sharing",
    "picture":false
  },
  {
    "name":"Components",
    "title":"Компоненты",
    "comment":"Основа модульной системы Vue.js",
    "ref":"https://docs.google.com/presentation/d/1wc3MBlxkmpnB5AdsvQq1b7rtvWfnKUDJez9FO3z60oM/edit?usp=sharing",
    "picture":false
  },
  {
    "name":"Events",
    "title":"События",
    "comment":"Событийная модель Vue.js",
    "ref":"https://plnkr.co/edit/vdEIxZYvoN4x6VFMX3kb?p=preview",
    "picture":false
  },
  {
    "name":"Templates",
    "title":"Шаблоны",
    "comment":"Существует досточное разнообразие способов определения шаблона компонента: символьной строкой (String), литералом (Template literal), X-Templates, Inline, рендер-функцией (Render functions), JSX и Single page components. Шаблоны Vue.js обеспечивают почти все, что нужно в приложении.",
    "code":[
      "// Можно задать именованный шаблон ",
      "// как обычный тег в html",
      "<template id='child'>",
      "  <div>",
      "    <slot name='original-slot'>",
      "    </slot>",
      "    <slot name='scoped-slot'",
      "          :message='childMessage'>",
      "    </slot>",
      "  </div>",
      "</template>",
      "// а затем в коде компонента указать ссылку на id шаблона",
      "template:'#child'"
    ],
    "ref":"",
    "picture":false
  },
  {
    "name":"Slots",
    "title":"Дистрибуция контента",
    "comment":"Слоты позволяют вставить контент родителя в определенное место потомка.<br/>Для доступа к слотам существует свойство $slots",
    "ref":"https://docs.google.com/presentation/d/1-Cu9dLOg5CVRFOHUbKy7PqSL0upFlnEakT-HLofbTdY/edit?usp=sharing",
    "picture":false
  },
  {
    "name":"Router",
    "title":"Маршрутизатор",
    "comment":"vue-router официально поддерживается командой разработчиков Vue.js",
    "code":["<script src='https://unpkg.com/vue-router/dist/vue-router.js'></script>"],
    "ref":false,
    "picture":"./images/cabine.gif"
  },
  {
    "name":"Transitions",
    "title":"Анимация состояний компонентов или элементов",
    "comment":"Vue отрабатывает анимационные переходы, добавляя и удаляя классы компонентам / элементам в процессе перехода из одного состояния в другое.<br/>Всего предусмотрено шесть классов переходов",
    "ref":"",
    "picture":false
  },
  {
    "name":"$http",
    "title":"vue-resource",
    "comment":"Метод <code>this.$http.get( sourceUrl )</code> возвращает объект <b>promise</b>, т.е. объект, имеющий состояние.<br/> Пока операция не завершена, состояние объекта будет <em>pending</em>, т.е. объект находится в ожидании завершения операции.<br/>Если операция завершена успешно, состояние объекта становится <em>fulfilled</em>, в противном случае - <em>rejected</em>.<br/> Для обработки изменения состояния объекта на него  нужно навесить обработчики.<br/> * Детальнее: <i>https://github.com/pagekit/vue-resource</i><br/> * Ссылка на библиотеку: <i>https://cdn.jsdelivr.net/npm/vue-resource@1.3.4</i><br/> * Для создания и редактирования JSON-файлов можно использовать сервис <i>http://www.jsoneditoronline.org/</i><br/><small>Создайте репозиторий на гитхабе, куда поместите свой JSON-файл<br/>* Сервис <i>https://jsonplaceholder.typicode.com/</i> можно использовать как эмулятор удаленного сервера</small>",
    "code":[
		  "var sourceUrl = 'https://garevna.github.io/vue.github.io/data/posts.json'",
		  "var promise = this.$http.get( sourceUrl )",
		  "promise.then ( successCallback, failureCallback )",
		  "// или еще проще:",
		  "this.$http.get( sourceUrl ).then(",
			"      successCallback, failureCallback)",
			"// функции-обработчики:",
			"// successCallback -  успешного завершения операции",
			"// failureCallback -  завершения операции с ошибкой"
		],
    "ref":"https://plnkr.co/edit/lZLVjgPDmkpgmIwzebMd?p=preview",
    "picture":false
  }
]
