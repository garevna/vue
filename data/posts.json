{
  "Vue.js": [
    {
      "head":"Vue",
      "picture":false,
      "code":[
          "new Vue  ( {",
          "  el: '…',",
          "  data : { … },",
          "  methods : { … },",
          "  computed : { … },",
          "  watch: {},",
          "})"
        ],
      "text":"Экземпляр Vue является моделью. Модель необходимо связать с представлением, т.е. с элементом DOM.<br/>Для связывания модели с представлением (элементом DOM) служит свойство el экземпляра Vue",
      "ref":false
    },
    {
      "head":"Model -> view",
      "picture":false,
      "code":[
        "const app = new Vue( {",
        "   ...",
        "}).$mount('#app')"
      ],
      "text":"При отсутствии свойства el экземпляра Vue связать модель с представлением можно с помощью метода $mount",
      "ref":false
    },
    {
      "head":"data | computed",
      "picture":false,
      "code":[
          "data : {",
          "  priceUSD: 10,",
          "  course: 25.4",
          "},",
          "computed: {",
          "  priceUA: function () {",
          "    return this.priceUSD * this.course",
          "  }",
          "}"
        ],
      "text":"Объекты data и computed являются встроенными свойствами экземпляра Vue. Эти объекты содержат реактивные свойства модели, т.е. свойства, при изменении которых происходит автоматическое изменение представления",
      "ref":[ "https://codepen.io/garevna/pen/QqEMoa" ]
    },
    {
      "head":"computed",
      "picture":"",
      "code":[
          "data : {",
          "  userId: 'Иван',",
          "  message: 'зайди в бухгалтерию'",
          "},",
          "computed: {",
          "  announcement: function () {",
          "    return this.userId + ', ' + this.message",
          "  }",
          "}"
        ],
      "text":"Вычисляемое свойство announcement будет пересчитано  только тогда, когда изменится одна из его зависимостей - userId или message.",
      "ref":[ "https://codepen.io/garevna/pen/veqNzL" ]
    },
    {
      "head":"$emit",
      "picture":false,
      "code":[
          "",
          "",
          "",
          "",
          "",
          ""
        ],
      "text":"",
      "ref":[ "https://plnkr.co/edit/vdEIxZYvoN4x6VFMX3kb?p=preview" ]
    }
  ],
  "Directives": [
    {
      "head":"v-bind",
      "picture":false,
      "code":[
          "// imageSrc - свойство родителя",
          "<img v-bind:src = 'imageSrc'/>",
          "// сокращенная запись:",
          "<img :src = 'imageSrc'/>"
        ],
      "text":"Динамически связывает атрибуты тега или входной параметр компонента с выражением",
      "ref":[
        "https://codepen.io/garevna/pen/eGRawR",
        "https://codepen.io/garevna/pen/VMzYdP"
      ]
    },
    {
      "head":"v-model",
      "picture":false,
      "code":[],
      "text":"Служит для двустороннего связывания потомка и родителя. Соответствующее свойство, указанное в директиве, может быть изменено в потомке, что будет реактивно отражено в родителе. Обычно используется для элементов форм",
      "ref":[
		    "https://codepen.io/garevna/pen/aLypvq",
		    "https://codepen.io/garevna/pen/oGKzOB",
		    "https://codepen.io/garevna/pen/xXvRyP",
		    "https://codepen.io/garevna/pen/PJMbrr",
		    "https://codepen.io/garevna/pen/WZVRKj",
		    "https://codepen.io/garevna/pen/RLQNjm"
      ]
    },
    {
      "head":"v-for",
      "picture":false,
      "code":[
          "<div v-for='item in items'>",
          "  {{ item.name }}",
          "  {{ item.price }}",
          "</div>"
        ],
      "text":"Служит для создания группы элементов на основе массива входных данных. Данные массива могут быть как примитивами, так и объектами или массивами",
      "ref":[	"https://codepen.io/garevna/pen/EwXGPB" ]
    },
    {
      "head":"v-show",
      "picture":false,
      "code":[],
      "text":"Директива, позволяющая управлять отображением элементов в представлении на основании значений переменных модели",
      "ref":[ "https://codepen.io/garevna/pen/OxjRJW" ]
    },
    {
      "head":"v-if",
      "picture":"",
      "code":[
          "<p v-if='expr'>{{ message }}</p>",
          "<p v-else> {{ error }}</p>"
        ],
      "text":"Условный рендеринг. В отличие от директивы v-show, добавляет или удаляет элемент DOM в зависимости от значения условного выражения expr. Директива v-else обеспечивает рендеринг альтернативного варианта, если условное выражение expr принимает значение false",
      "ref":[
        "https://codepen.io/garevna/pen/EwvgKJ",
        "https://codepen.io/garevna/pen/NavRdX"
      ]
    },
    {
      "head":"v-on",
      "picture":false,
      "code":[
          "<button v-on:click = 'clickHandler'>",
          "  Кликни!",
          "</button>",
          "// краткая форма:",
          "<button @click = 'clickHandler'>",
          "  Кликни!",
          "</button>"
        ],
      "text":"Прикрепляет к элементу прослушиватель событий. Тип события является аргументом директивы.",
      "ref":[
        "https://codepen.io/garevna/pen/PJjgPm",
        "https://codepen.io/garevna/pen/veJZOb",
        "https://codepen.io/garevna/pen/YrVpmm"
      ]
    },
    {
      "head":"v-cloak",
      "picture":false,
      "code":[
          "<div v-cloak>",
          "  {{ message }}",
          "</div>"
        ],
      "text":"Элемент не будет показан до окончания компиляции. Эта директива позволяет избежать отображения 'усатого' ( {{...}} ) синтаксиса клиенту",
      "ref":false
    }
  ],
  "Components": [
    {
      "head":"Radio button",
      "picture":false,
      "code":[],
      "text":"Простой компонент с литеральным шаблоном. Использование директив v-for, v-bind, v-model при вызове компонента. Передача данных из     компонента родителю с помощью встроенного метода $emit",
      "ref":[ "https://codepen.io/garevna/pen/pWdLoz" ]
    },
    {
      "head":"Checkboxes",
      "picture":false,
      "code":[],
      "text":"Многократно используемый компонент, определенный в глобальной области видимости, с динамически обновляемым контентом",
      "ref":[ "https://plnkr.co/edit/77n86nKgvcllq2nRKLGb?p=preview" ]
    },
    {
      "head":"dropdown menu",
      "picture":false,
      "code":[],
      "text":"Пример компонента dropdown-menu, в котором при выборе одного из элементов меню происходит отправка события родителю (экземпляру Vue) с передачей внутреннего содержимого выбранного пункта меню. В экземпляре Vue происходит обработка события и вывод соотвествующего текста на страницу",
      "ref":[ "https://plnkr.co/edit/qKB8ACBVu7jZvqnBscn6?p=preview" ]
    }
  ],
  "Events":[
    {
      "head":"Отцы и дети",
      "picture":false,
      "code":[],
      "text":"Передача события из вложенных компонентов",
      "ref":["https://plnkr.co/edit/h5dcxsniStLikyXAloSc?p=preview"]
    },
    {
      "head":"Шина событий",
      "picture":false,
      "code":[],
      "text":"Передача событий через общую шину",
      "ref":["https://plnkr.co/edit/XRznjj6FTBbyuwiVHSeC?p=preview"]
    },
    {
      "head":"Шина данных",
      "picture":false,
      "code":[],
      "text":"Использование общего хранилища данных, загружаемых асинхронно с помощью метода $http.get плагина vue-resource (<a href='https://github.com/pagekit/vue-resource'>https://github.com/pagekit/vue-resource</a>)",
      "ref":["https://plnkr.co/edit/asuwUwM2UGKpWshgS4lG?p=preview"]
    }
  ],
  "Templates":[
    {
      "head":"String",
      "picture":false,
      "code":[
          "Vue.component('comp', {",
          "   template:",
          "     `<div class='comp'></div>`",
          "})"
        ],
      "text":"Шаблон компонента в виде текстовой строки имеет единственное достоинство - широкую поддержку браузеров",
      "ref":false
    },
    {
      "head":"literal",
      "picture":false,
      "code":[
          "Vue.component('comp', {",
          "  template:",
          "    `<div class='comp'",
          "        @click='check'>",
          "     </div>`,",
          "  methods: {",
          "    check () {",
          "      this.show = !this.show;",
          "    }",
          "  }",
          "})"
        ],
      "text":"Литералы шаблонов ES6 («backticks») позволяют определять шаблон на нескольких строках, чего нельзя сделать в обычной строке Javascript. Такие шаблоны намного легче читать, и сейчас они поддерживаются во многих новых браузерах.",
      "ref":false
    },
    {
      "head":"Тег <template>",
      "picture":false,
      "code":[
          "<template id='my-template'>",
          "  <button class='btn' @click='callback'>",
          "  <div class='title'></div>",
          "</template>"
        ],
      "text":"Шаблон можно описать в теге <template> с атрибутом id, значение которого потом использовать для подключения шаблона к компоненту",
      "ref":["https://codepen.io/garevna/pen/yzvxQb"]
    },
    {
      "head":"X-template",
      "picture":false,
      "code":[
          "<script type='text/x-template'",
          "        id='my-template'>",
          "   <div class='wrapper'",
          "        @click='callback'>",
          "     <div class='title'></div>",
          "   </div>",
          "</script>"
        ],
      "text":"С помощью этого метода шаблон определяется внутри тега скрипта в файле index.html. Тэг скрипта маркируется как text/x-template и имеет идентификатор, на который будет ссылка в определении компонента: Vue.component('sample', { template: '#my-template' }); Этот метод позволяет писать валидный код HTML, но при этом шаблон отделен от определения компонента.",
      "ref":["https://codepen.io/garevna/pen/MEQyZL"]
    },
    {
      "head":"inline",
      "picture":false,
      "code":[
          "<sample-component inline-template>",
          "  <div class='wrapper'",
          "       @click='check'>",
          "     <div class='title'></div>",
          "  </div>",
          "</sample-component>"
        ],
      "text":"Атрибут inline-template в теге компонента указывает Vue, что внутренний контент является шаблоном, а не распределенным контентом (слоты). Преимущество  этого метода заключается в том, что контент находится в правильном месте в HTML-шаблоне и поэтому может отображаться при загрузке страницы, а не в ожидании запуска Javascript.",
      "ref":["https://codepen.io/garevna/pen/dVdORP"]
    },
    {
      "head":"render function",
      "picture":false,
      "code":[
          "const Post = Vue.component('new-post', {",
          "  render: function (createElement) {",
          "    var header = this.$slots.header",
          "    var body   = this.$slots.default",
          "    var footer = this.$slots.footer",
          "    return createElement('div', [",
          "      createElement('header', header),",
          "      createElement('main', body),",
          "      createElement('footer', footer)",
          "    ])",
          "  }",
          "})"
        ],
      "text":"При создании динамических компонентов с переменными входными параметрами функции рендеринга зачастую оказываются более удобны, чем другие способы задания шаблона компонента. Часто это связано с использованием слотов. Фактически во время сборки все шаблоны Vue.js компилируются в функции рендеринга. Шаблоны просто обеспечивают удобный и более привычный синтаксический сахар поверх функций рендеринга. Компоненты с функциями рендеринга не имеют тега или свойства template. Вместо этого внутри компонента объявляется функция render, которой передается в качестве аргумента метод createElement (принятый псевдоним h), и которая возвращает элемент, созданный с помощью этой функции. Шаблоны Vue имеют множество удобных функций для добавления базовой логики и привязки к шаблонам. Функции Render не имеют к ним доступа. Вместо этого они должны быть реализованы на простом Javascript, который для большинства директив довольно прост.",
      "ref":[
        "https://plnkr.co/edit/ORRVJLhVVUyE2OJIoX9R?p=preview",
        "https://plnkr.co/edit/H0GhWgLKuiw1zaFGQLZ1?p=preview"
      ]
    },
    {
      "head":"JSX",
      "picture":false,
      "code":[],
      "text":"JSX является самым спорным вариантом шаблона во Vue. Некоторые разработчики рассматривают JSX как нечто уродливое, противоречащее главной концепции Vue. JSX требует предварительной компиляции, так как он не читается браузерами.",
      "ref":false
    },
    {
      "head":"SFC",
      "picture":false,
      "code":[
          "<style scoped>",
          "  .example {",
          "    color: red;",
          "  }",
          "</style>",
          "<template>",
          "  <div class='example'>hi</div>",
          "</template>",
          ""
        ],
      "text":"При условии использованя инструментов сборки Single File Components является наилучшим вариантом создания шаблона компонента. Этот способ вобрал в себя лучшее из всех остальных способов: он позволяет писать валидную разметку, сохраняя при этом все части компонента в одном файле с раширением vue. Если тег <style> имеет атрибут scoped, его CSS будет применяться только к элементам текущего компонента. Это похоже на инкапсуляцию стиля в Shadow DOM. Этот способ требует транспиляции, и некоторые IDE не поддерживают подсветку синтаксиса vue-файлов.",
      "ref":["https://codesandbox.io/s/o29j95wx9"]
    }
  ],
  "Slots": [
    {
      "head":"Слоты",
      "picture":false,
      "code":[],
      "text":"Простые (не именованные) слоты",
      "ref":[
        "https://codepen.io/garevna/pen/QqmbrO",
        "https://plnkr.co/edit/fjZol88VeRAOgn9OSe45?p=preview",
        "https://plnkr.co/edit/x7XCNVDkGfm6JPvhVikz?p=preview"
      ]
    },
    {
      "head":"named slots",
      "picture":false,
      "code":[],
      "text":"Именованные слоты",
      "ref":["https://plnkr.co/edit/9nFUtNDqeZ1JX003oDHO?p=preview"]
    },
    {
      "head":"scoped slots",
      "picture":false,
      "code":[],
      "text":"Слоты с контекстом (областью видимости)",
      "ref":[
        "https://plnkr.co/edit/H0GhWgLKuiw1zaFGQLZ1?p=preview",
        "https://plnkr.co/edit/7gKCXrakfSf5EDFBokN5?p=preview"
      ]
    },
    {
      "head":"scoped named slots",
      "picture":false,
      "code":[],
      "text":"Пример использования именованных слотов",
      "ref":["https://plnkr.co/edit/7gKCXrakfSf5EDFBokN5?p=preview"]
    }
  ],
  "Transitions":[
    {
      "head":"Анимация",
      "picture":false,
      "code":[
          "<transition name='sliding'>",
          "    <div class='animated'",
          "         v-if='visibleElem'>",
          "    </div>",
          "</transition>"
        ],
      "text":"Использование встроенных компонентов transition и transition-group с классами -enter | -leave для анимации появления / исчезновения элементов DOM",
      "ref":[
        "https://codepen.io/garevna/pen/XewZZz",
	      "https://plnkr.co/edit/c5pN5tiIEU75ZbnDMxdW?p=preview",
	      "https://plnkr.co/edit/brgMsFIcY71mTr8Yf44m?p=preview",
        "https://codepen.io/garevna/pen/yzWrdN",
        "https://codepen.io/garevna/pen/mBYNEM"
      ]
    }
  ],
  "Router":[
    {
      "head":"Маршруты",
      "picture":false,
      "code":[
          "// создаем массив маршрутов",
          "const routes = [",
          "  {",
          "    path: '/Библиотека',",
          "    component: Library",
          "  },",
          "  {",
          "    path: '/Кафе',",
          "    component: Cafe",
          "  }",
          "]",
          "// создаем маршрутизатор и ",
          "// передаем ему маршруты",
          "const router = new VueRouter ( {",
          "   routes: routes",
          "})",
          "// создаем экземпляр Vue",
          "// и привязываем к нему роутер",
          "const app = new Vue ({",
          "  el: '#app',",
          "  router",
          "})",
          "// Теперь в приложении можно",
          "// вставлять ссылки <router-link>",
          "// и зарезервировать место, куда",
          "// будет вставлен компонент,",
          "<router-link to='/Библиотека'>",
          "</router-link>",
          "// соответствующий пути перехода",
          "<router-view></router-view>"
		  ],
      "text":"Роутеру нужно указать массив путей (routes). Каждый путь должен указывать на компонент. Для вставки ссылок на маршруты в html-код служит компонент router-link с атрибутом 'to', значение которого является машрутом <router-link to='/Библиотека'></router-link>. Содержимое компонента (после рендеринга) будет помощено в контейнер <router-view></router-view>.",
      "ref":["https://plnkr.co/edit/M2DdjqrXnIbOqQIbWGEh?p=preview"]
    },
    {
      "head":"Роутер",
      "picture":false,
      "code":[],
      "text":"Роутер с анимацией: Винсент ван Гог",
      "ref":["https://plnkr.co/edit/fqer871u9AOOORbbVu5E?p=preview"]
    },
    {
      "head":"Nested routes",
      "picture":false,
      "code":[],
      "text":"Роутер с вложенными именованными маршрутами",
      "ref":["https://plnkr.co/edit/9tX5uw1cEMTHEaSODs3Z?p=preview"]
    }
  ]
}
